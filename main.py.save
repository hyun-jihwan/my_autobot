import json
import time
from datetime import datetime, timedelta
from strategies.strategy1 import run_strategy1
from strategies.strategy2 import run_strategy2
from strategies.strategy3 import run_strategy3
from sell_strategies.sell_strategy1 import sell_strategy1
from sell_strategies.sell_strategy2 import sell_strategy2
from sell_strategies.sell_strategy3 import evaluate_exit_strategy3
from utils.balance import load_holdings_from_file, get_holding_info
from utils.telegram import send_telegram
from utils.sheet import record_to_sheet
from utils.candle import get_all_krw_symbols, get_candles
from scanners.scanner2 import detect_strategy2_signals
from transition.strategy3_exit import handle_strategy3_exit
from scanners.scanner3 import detect_fast_rising_symbols




# 봇 실행 전 → 보유 종목 자동 복구
load_holdings_from_file()

# 설정 불러오기
with open("config.json") as f:
    config = json.load(f)


# 전략 매핑
strategy_map = {
    "strategy1": run_strategy1,
    "strategy2": run_strategy2,
    "strategy3": run_strategy3
}

# 메인 루프
def run():
    fast_mode = False
    fast_mode_trigger_time = None

    while True:
        now = datetime.now()
        print(f"\n[{now.strftime('%Y-%m-%d %H:%M:%S')}] 🚀 Bot Running...")

        try:
            print("\n📈 [전략1 실행 시작]")
            strategy1_result = strategy1(config)
            if strategy1_result:
                print(f"🎯 전략1 진입 완료: {strategy1_result['종목']}")
            else:
                print("⛔ 전략1 진입 조건 미충족")

            print("📤 [매도 전략1 실행]")
            sell_strategy1(config)

            # 30초마다 반복
            time.sleep(30)

        except KeyboardInterrupt:
            print("⏹️ 프로그램 수동 종료됨")
            break

        except Exception as e:
            print(f"❌ 예외 발생: {e}")
            time.sleep(10)

        # 전략2 급등 감지
        config["watchlist"] = detect_strategy2_signals()
        if config["watchlist"]:
            print(f"⚡ 전략2 급등 종목: {config['watchlist']}")

        # ✅ 전략 실행 순서대로 실행 (strategy1 → strategy3 순서 보장)
        for strategy_name in config["strategies"]:
            print(f"🚀 전략 실행 중: {strategy_name}")
            strategy_func = strategy_map.get(strategy_name)
            if strategy_func:
                try:
                    result = strategy_func(config)
                    if result:
                        print(f"✅ {strategy_name} 실행 결과: {result}")
                except Exception as e:
                    print(f"❌ {strategy_name} 실행 중 오류: {e}")

        # 전략2 매도 전략 실행
        try:
            candles_dict = {}
            for symbol in list(balance["holdings"].keys()):
               candles = get_candles(symbol, interval="1", count=50)  #실제 기존 캔들
                if candles:
                    candles_dict[symbol] = candles

            sell_results = sell_strategy2(candles_dict, balance)

            for res in sell_results:
                print(f"💸 전략2 매도 완료: {res['symbol']} / 가격: {res['price']} / 유형: {res['type']}")
        except Exception as e:
            print(f"❌ 전략2 매도 실행 중 오류: {e}")

        # 전략3 급등 감지 (fast mode 트리거용)
        strategy3_signals = detect_fast_rising_symbols()
        if strategy3_signals:
            print(f"⚡ 전략3 급등 감지됨: {strategy3_signals}")
            config["strategy3_signals"] = strategy3_signals
            fast_mode = True
            fast_mode_trigger_time = datetime.now()

        # 📡 급등 모드 유지 시간 제어
        if fast_mode:
            elapsed = (datetime.now() - fast_mode_trigger_time).seconds
            if elapsed >= config.get("fast_mode_duration", 900):
                print("⏱ 급등 모드 해제 → 기본 간격 복귀")
                fast_mode = False

        # ⏳ 스캔 간격 설정
        scan_interval = config["fast_scan_interval"] if fast_mode else config["scan_interval"]
        print(f"⏳ 다음 스캔까지 대기: {scan_interval}초\n")
        time.sleep(scan_interval)


if __name__ == "__main__":
    run()  # ✅ 실전 루프 실행


